package utils

import (
	"context"
	"fmt"
	"k8sEPDS/pkg/request"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeletePods 删除指定命名空间中的 Pod。
// 参数:
//   token     - 用于访问 API Server 的认证 token
//   namespace - Pod 所在的命名空间
//   podName   - 要删除的 Pod 的名称
// 返回:
//   error     - 删除过程中遇到的错误
func DeletePods(token string, namespace string, podName string) error {
    // 获取 Kubernetes ClientSet
    clientset, err := request.GetClientSet(token)
    if err != nil {
        return fmt.Errorf("获取 ClientSet 失败: %w", err)
    }

    // 设置带超时的上下文，避免请求长时间挂起
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    // 调用 API 删除 Pod
    if err := clientset.CoreV1().Pods(namespace).Delete(ctx, podName, metav1.DeleteOptions{}); err != nil {
        return fmt.Errorf("删除 Pod %s 失败: %w", podName, err)
    }

    fmt.Printf("[√] 成功删除 Pod %s\n", podName)
    return nil
}

// DeleteNodes 删除指定名称的 Node。
// 参数:
//   token    - 用于访问 API Server 的认证 token
//   nodeName - 要删除的 Node 名称
// 返回:
//   error    - 删除过程中遇到的错误
func DeleteNodes(token string, nodeName string) error {
    // 获取 Kubernetes ClientSet
    clientset, err := request.GetClientSet(token)
    if err != nil {
        return fmt.Errorf("获取 ClientSet 失败: %w", err)
    }

    // 设置超时上下文，防止请求长时间挂起
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    // 删除 Node 对象
    if err := clientset.CoreV1().Nodes().Delete(ctx, nodeName, metav1.DeleteOptions{}); err != nil {
        return fmt.Errorf("删除 Node %s 失败: %w", nodeName, err)
    }

    fmt.Printf("[√] 成功删除 Node %s\n", nodeName)
    return nil
}

// DeleteValidatingWebhookConfigurations 删除指定名称的 ValidatingWebhookConfiguration。
// 参数:
//   token      - 用于访问 API Server 的认证 token
//   configName - 要删除的 ValidatingWebhookConfiguration 的名称
// 返回:
//   error      - 删除过程中遇到的错误
func DeleteValidatingWebhookConfigurations(token string, configName string) error {
    // 获取 Kubernetes ClientSet
    clientset, err := request.GetClientSet(token)
    if err != nil {
        return fmt.Errorf("获取 ClientSet 失败: %w", err)
    }

    // 设置超时上下文，防止请求长时间挂起
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    // 调用 API 删除 ValidatingWebhookConfiguration 对象
    if err := clientset.AdmissionregistrationV1().ValidatingWebhookConfigurations().Delete(ctx, configName, metav1.DeleteOptions{}); err != nil {
        return fmt.Errorf("删除 ValidatingWebhookConfiguration %s 失败: %w", configName, err)
    }

    fmt.Printf("[√] 成功删除 ValidatingWebhookConfiguration %s\n", configName)
    return nil
}
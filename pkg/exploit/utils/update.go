package utils

import (
	"context"
	"fmt"
	"k8sEPDS/pkg/request"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// UpdateSecret 更新指定命名空间中 Secret 的部分字段。
// 参数:
//   token      - 用于访问 API Server 的认证 token
//   namespace  - Secret 所在的命名空间
//   secretName - 要更新的 Secret 名称
// 返回:
//   error      - 更新过程中遇到的错误
func UpdateSecret(token string, namespace string, secretName string) error {
    // 获取 Kubernetes ClientSet，并检查错误
    clientset, err := request.GetClientSet(token)
    if err != nil {
        return fmt.Errorf("获取 ClientSet 失败: %w", err)
    }

    // 使用带超时控制的上下文，防止请求长时间挂起
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    // 获取指定的 Secret
    secret, err := clientset.CoreV1().Secrets(namespace).Get(ctx, secretName, metav1.GetOptions{})
    if err != nil {
        return fmt.Errorf("获取 Secret %s 失败: %w", secretName, err)
    }

    // 修改 Secret 字段
    secret.Type = "kubernetes.io/service-account-token"
    secret.Namespace = "default"

    // 确保 Annotations 不为 nil
    if secret.Annotations == nil {
        secret.Annotations = make(map[string]string)
    }
    secret.Annotations["kubernetes.io/service-account.name"] = "test-admin"

    // 更新 Secret
    updatedSecret, err := clientset.CoreV1().Secrets(namespace).Update(ctx, secret, metav1.UpdateOptions{})
    if err != nil {
        return fmt.Errorf("更新 Secret %s 失败: %w", secretName, err)
    }

    fmt.Printf("[√] 成功更新 Secret: %s\n", updatedSecret.Name)
    return nil
}

// UpdatePod 更新指定命名空间中 Pod 的 ServiceAccountName 和 NodeName。
// 参数:
//   token     - 用于访问 API Server 的认证 token
//   namespace - Pod 所在的命名空间
//   podName   - 要更新的 Pod 名称
// 返回:
//   error     - 更新过程中遇到的错误
func UpdatePod(token string, namespace string, podName string) error {
    // 获取 Kubernetes ClientSet，并检查错误
    clientset, err := request.GetClientSet(token)
    if err != nil {
        return fmt.Errorf("获取 ClientSet 失败: %w", err)
    }

    // 创建带超时控制的上下文
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    // 获取指定 Pod
    pod, err := clientset.CoreV1().Pods(namespace).Get(ctx, podName, metav1.GetOptions{})
    if err != nil {
        return fmt.Errorf("获取 Pod %s 失败: %w", podName, err)
    }

    // 修改 Pod 的字段
    pod.Spec.ServiceAccountName = "test-admin"
    pod.Spec.NodeName = "k8s-node1"

    // 更新 Pod 资源
    updatedPod, err := clientset.CoreV1().Pods(namespace).Update(ctx, pod, metav1.UpdateOptions{})
    if err != nil {
        return fmt.Errorf("更新 Pod %s 失败: %w", podName, err)
    }

    fmt.Printf("[√] 成功更新 Pod: %s\n", updatedPod.Name)
    return nil
}

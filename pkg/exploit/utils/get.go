package utils

import (
	"context"
	"errors"
	"fmt"
	"k8sEPDS/pkg/request"
	"time"


	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GetSecrets 通过 Kubernetes 客户端 API 获取指定命名空间中 adminName 对应 Secret 中的 token 数据。
// 参数:
//   token      - 用于访问 API Server 的认证 token
//   adminName  - Secret 名称
//   SaNamespace- Secret 所在的命名空间
// 返回:
//   string     - Secret 中的 token 字符串
//   error      - 出现错误时返回的错误信息
func GetSecrets(token string, adminName string, SaNamespace string) (string, error) {
	// 获取 Kubernetes ClientSet
	clientset, err := request.GetClientSet(token)
	if err != nil {
		return "", fmt.Errorf("获取 ClientSet 失败: %w", err)
	}
	// 使用带超时控制的 Context 避免请求长时间挂起
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

	// 定向获取指定命名空间中的 Secret 对象
    secretObj, err := clientset.CoreV1().Secrets(SaNamespace).Get(ctx, adminName, metav1.GetOptions{})
    if err != nil {
        return "", fmt.Errorf("定向获取 Secret 失败: %w", err)
    }
	// 检查 Secret 数据中是否存在 token 字段，并返回其字符串内容
    if tokenBytes, ok := secretObj.Data["token"]; ok {
        return string(tokenBytes), nil
    }
	return "", errors.New("secret 中未找到 token")
}
